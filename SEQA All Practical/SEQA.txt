Practical 1

Aim: Identify the problem definition and requirement for a given problem statement.

THEORY:
Requirement’s identification is the first step of any software development project. Until the
requirements of a client have been clearly identified, and verified, no other task (design, coding,testing) could begin. Usually, business analysts having domain knowledge on the subject matter discuss with clients and decide what features are to be implemented.

Characteristics of Requirements:
Requirements gathered for any new system to be developed should exhibit the following three
properties:
• Unambiguity: There should not be any ambiguity what a system to be developed should do.

• Consistency: To illustrate this, consider the automation of a nuclear plant. Suppose one of
the clients say that it the radiation level inside the plant exceeds R1, all reactors should beshut down. However, another person from the client side suggests that the threshold
radiation level should be R2. Thus, there is an inconsistency between the two end users
regarding what they consider as threshold level of radiation.
• Completeness: A particular requirement for a system should specify what the system should
do and also what it should not. For example, consider a software to be developed for ATM.
If a customer enters an amount greater than the maximum permissible withdrawal amount,
the ATM should display an error message, and it should not dispense any cash.

Categorization of Requirement:
Based on the target audience or subject matter, requirements can be classified into different
types, as stated below:
• User requirements: They are written in natural language so that both customers can verify
their requirements have been correctly identified
• System requirements: They are written involving technical terms and/or specifications,
and are meant for the development or testing teams.

• Functional requirements (FRs): These describe the functionality of a system -- how a system should react to a particular set of inputs and what should be the corresponding output.

• Non-functional requirements (NFRs): They are not directly related what functionalities are expected from the system. However, NFRs could typically define how the system should
behave under certain situations. For example, a NFR could say that the system should work
with 128MB RAM. Under such condition, a NFR could be more critical than a FR.

Non-functional requirements could be further classified into different types like: 
• Product requirements: For example, a specification that the web application should use only plain HTML, and no frames.
• Performance requirements: For example, the system should remain available 24x7. 
• Organizational requirements: The development process should comply to SEI CMM level.











Practical 2

Aim: Modeling the UML use case diagram and capturing use case scenarios.

THEORY:
Use case diagram is a platform that can provide a common understanding for the endusers, developers and the domain experts. It is used to capture the basic functionality i.e., use
cases, and the users of those available functionality, i.e., actors, from a given problem statement.

Actor
An actor can be defined as an object or set of objects, external to the system, which interacts with the system to get some meaningful work done. Actors could be human, devices, or even other systems.
For example, consider the case where a customer withdraws cash from an ATM. Here, customer
is a human actor.

Actors can be classified as below :
• Primary actor: They are principal users of the system, who fulfil their goal by availing
some service from the system. For example, a customer uses an ATM to withdraw cash when he needs it. A customer is the primary actor here.

• Supporting actor: They render some kind of service to the system. "Bank representatives", who replenishes the stock of cash, is such an example. It may be noted that replenishing stock of cash in an ATM is not the prime functionality of an ATM.

Use Case
A use case is simply a functionality provided by a system.
Continuing with the example of the ATM, withdraw cash is a functionality that the ATM
provides. Therefore, this is a use case. Other possible use cases include, check balance, change PIN, and so on.
Use cases include both successful and unsuccessful scenarios of user interactions with the
system. For example, authentication of a customer by the ATM would fail if he enters wrong
PIN. In such case, an error message is displayed on the screen of the ATM.

Subject
Subject is simply the system under consideration. Use cases apply to a subject. For example, an ATM is a subject, having multiple use cases, and multiple actors interact with it. However, one should be careful of external systems interacting with the subject as actors.

Association between Actors and Use Cases
A use case is triggered by an actor. Actors and use cases are connected through binary
associations indicating that the two communicates through message passing. An actor must be associated with at least one-use case. Similarly, a given use case must be associated with at least one actor. Association among the actors are usually not shown. However, one can depict the class hierarchy among actors.
Use Case Relationships
Three types of relationships exist among use cases:
• Include relationship
• Extend relationship
• Use case generalization









Practical 3

Aim: Create the E-R Model from given problem statement.

THEORY:
Developing databases is a very important task to develop a system. Before going to form
exact database, tables and establishing relationships between them, we conceptually or logicallycan model our database using ER diagrams.

Entity Relationship Model
Entity-Relationship model is used to represent a logical design of a database to be created. In ER model, real world objects (or concepts) are abstracted as entities, and different possible associations among them are modelled as relationships.

Entity Set and Relationship Set
An entity set is a collection of all similar entities. For example, "Student" is an entity set that abstracts all students. Ram, John are specific entities belonging to this set. Similarly, a "Relationship" set is a set of similar relationships.

Keys
One or more attribute(s) of an entity set can be used to define the following keys:

• Super key: One or more attributes, which when taken together, helps to uniquely identify
an entity in an entity set. For example, a school can have any number of students.However,  if we know grade and roll number, then we can uniquely identify a student in that school.
• Candidate key: It is a minimal subset of a super key. In other words, a super key might
contain extraneous attributes, which do not help in identifying an object uniquely. When
such attributes are removed, the key formed so is called a candidate key.
• Primary key: A database might have more than one candidate key. Any candidate key
chosen for a particular implementation of the database is called a primary key.
• Prime attribute: Any attribute taking part in a super key.

Mapping Cardinalities
One of the main tasks of ER modelling is to associate different entity sets. Let's consider two entity sets E1 and E2 associated by a relationship set R. Based on the number of entities in E1 and E2 are associated with, we can have the following four type of mappings:

• One to one: An entity in E1 is related to at most a single entity in E2, and vice versa.

• One to many: An entity in E1 could be related to zero or more entities in E2. Any entity
in E2 could be related to at most a single entity in E1.

• Many to one: Zero or more number of entities in E1 could be associated to a single
entity in E2. However, an entity in E2 could be related to at most one entity in E1.

• Many to many: Any number of entities could be related to any number of entities in E2,
including zero, and vice versa.












Practical 4

Aim: Analyze the Domain classes and design class diagram for the given problem 
statement.

THEORY
Same types of objects are typically implemented by class in object-oriented programming. As the structural unit of the system can be represented through the classes, so, it is very important to identify the classes before start implementing all the logical flows of the system.In this experiment we will learn how to identify the classes from a given problem statement.

Domain Class
In Object Oriented paradigm Domain Object Model has become subject of interest for its excellent problem comprehending capabilities towards the goal of designing a good software system. 


Class
Classes are the structural units in object-oriented system design approach, so it is essential to know all the relationships that exist between the classes, in a system. All objects in a system are also interacting to each other by means of passing messages from one object to another. Sequence diagram shows these interactions with time ordering of the messages.In this Experiment, we will learn about the representation of class diagram and sequence diagram. We also learn about different relationships that exist among the classes, in a system.From the experiment of sequence diagram, we will learn about different types of messages passing in between the objects and time ordering of those messages, in a system.
Structural and Behavioral aspects. Developing a software system in object-oriented approach is very much dependent on understanding the problem. Some aspects and the respective models are used to describe problems and in context of those aspects the respective models give a clear idea regarding the problem to adesigner. For developer, structural and behavioral aspects are two key aspects to see through a 
problem to design a solution for the same.

Class diagram
It is a graphical representation for describing a system in context of its static construction.Elements in class diagram Class diagram contains the system classes with its data members, operations and relationships between classes.

Class
A set of objects containing similar data members and member functions is described by a class. In UML syntax, class is identified by solid outline rectangle with three compartments which contain

• Class name
A class is uniquely identified in a system by its name. A textual string is taken as class name. It lies in the first compartment in class rectangle.

• Attributes
Property shared by all instances of a class. It lies in the second compartment in class rectangle.

• Operations
An execution of an action can be performed for any object of a class. It lies in the last compartment in class rectangle.











Practical 5
Aim: Design the UML Sequence diagram for the given problem definition.

THEORY:

Sequence diagram
It represents the behavioral aspects of a system. Sequence diagram shows the interactions
between the objects by means of passing messages from one object to another with respect to
time in a system.

Elements in sequence diagram
Sequence diagram contains the objects of a system and their life-line bar and the messages
passing between them.

Object
Objects appear at the top portion of sequence diagram. Object is shown in a rectangle box. Nameof object precedes a colon ‘:’ and the class name, from which the object is instantiated.

Life-line bar
A down-ward vertical line from object-box is shown as the life-line of the object. A rectangle bar on life-line indicates that it is active at that point of time.

Messages
Messages are shown as an arrow from the life-line of sender object to the life-line of receiver object and labeled with the message name. Chronological order of the messages passing throughout the objects’ life-line show the sequence in which they occur. There may exist some different types of messages:

• Synchronous messages: Receiver start processing the message after receiving it and
sender needs to wait until it is made. A straight arrow with close and fill arrow-head from
sender life-line bar to receiver end, represent a synchronous message.

• Asynchronous messages: For asynchronous message sender needs not to wait for the
receiver to process the message. A function call that creates thread can be represented as
an asynchronous message in sequence diagram. A straight arrow with open arrow-head
from sender life-line bar to receiver end, represent an asynchronous message.

• Return message: For a function call when we need to return a value to the object, from
which it was called, then we use return message. But it is optional, and we are using it
when we are going to model our system in much detail. A dashed arrow with open arrowhead from sender life-line bar to receiver end, represent that message.

• Response message: One object can send a message to self. We use this message when
we need to show the interaction between the same object.

Benefits of sequence diagrams
Sequence diagrams can be useful references for businesses and other organizations. Try drawing a sequence diagram to:
1) Represent the details of a UML use case.
2) Model the logic of a sophisticated procedure, function, or operation.
3) See how objects and components interact with each other to complete a process.
4) Plan and understand the detailed functionality of an existing or future scenario.












Practical 6 
Aim: Construct the State Chart Diagram for the given problem definition.

THEORY
Capturing the dynamic view of a system is very important for a developer to develop the
logic for a system. State chart diagrams and activity diagrams are two popular UML diagram to visualize the dynamic behavior of an information system.

State chart Diagrams
In case of Object Oriented Analysis and Design, a system is often abstracted by one or more classes with some well-defined behaviour and states. A statechart diagram is a pictorial representation of such a system, with all it's states, and different events that lead
transition from one state to another.

Building Blocks of a Statechart Diagram
State
A state is any "distinct" stage that an object (system) passes through in it's lifetime. An object remains in a given state for finite time until "something" happens, which makes it to move to another state. All such states can be broadly categorized into following three types:
• Initial: The state in which an object remain when created
• Final: The state from which an object do not move to any other state [optional]
• Intermediate: Any state, which is neither initial, nor final

Intermediate states usually have two compartments, separated by a horizontal line, called the name compartment and internal transitions compartment. They are described below:
• Name compartment: Contains the name of the state, which is a short, simple,
descriptive string
• Internal transitions compartment: Contains a list of internal activities performed as
long as the system is in this state.

The internal activities are indicated using the following syntax: action-label / action-expression.Action labels could be any condition indicator. There are, however, four special action labels:
• Entry: Indicates activity performed when the system enter this state
• Exit: Indicates activity performed when the system exits this state
• Do: indicate any activity that is performed while the system remain in this state or until the action expression results in a completed computation
• Include: Indicates invocation of a sub-machine

Transition
Transition is movement from one state to another state in response to an external stimulus (or any internal event). 









Practical 7
Aim: Construct the Activity Diagram for the given problem definition.

THEORY
Activity Diagrams
Activity diagrams fall under the category of behavioural diagrams in Unified Modeling Language. It is a high level diagram used to visually represent the flow of control in a system. It has similarities with traditional flow charts. However, it is more powerful than a simple flow chart since it can represent various other concepts like concurrent activities, their joining, and so on.

Components of an Activity Diagram
Below we describe the building blocks of an activity diagram.

Activity
An activity denotes a particular action taken in the logical flow of control. This could simply be invocation of a mathematical function, alter an object's properties and so on. An activity is represented with a rounded rectangle, as shown in table-01. A label inside the rectangle identifies the corresponding activity.
There are two special type of activity nodes: initial and final.

Decision
A decision node, represented with a diamond, is a point where a single flow enters and two or more flows leave. The control flow can follow only one of the outgoing paths. The outgoing  edges often have guard conditions indicating true-false or if-then-else conditions. However, they can be omitted in obvious cases. The input edge could also have guard conditions. Alternately, a note can be attached to the decision node indicating the condition to be tested.

Merge
This is represented with a diamond shape, with two or more flows entering, and a single flow leaving out. A merge node represents the point where at least a single control should reach before further processing could continue.

Fork
Fork is a point where parallel activities begin. For example, when a student has been registered with a college, he can in parallel apply for student ID card and library card. A fork is graphically depicted with a black bar, with a single flow entering and multiple flows leaving out.

Join
A join is depicted with a black bar, with multiple input flows, but a single output flow. 
Physically it represents the synchronization of all concurrent activities. Unlike a merge, in case of a join all of the incoming controls must be completed before any further progress could be made. For example, a sales order is closed only when the customer has receive the product, and  the sales company has received it's payment.

Note
UML allows attaching a note to different components of a diagram to present some textual 
information. The information could simply be a comment or may be some constraint. A note can be attached to a decision point, for example, to indicate the branching criteria.

Partition
Different components of an activity diagram can be logically grouped into different areas, called partitions or swimlanes. They often correspond to different units of an organization or different actors. 











Practical 8
AIM: Design Data Flow Diagram for the given problem definition.

THEORY:
Information Systems (IS) help in managing and updating the vast business-related information.Before designing such an IS, it is helpful to identify the various stakeholders, and the information that they would be exchanging with the system.

Data Flow Diagram
DFD provides the functional overview of a system. The graphical representation easily overcomes any gap between ’user and system analyst’ and ‘analyst and system designer’ in understanding a system. Starting from an overview of the system it explores detailed design of a system through a hierarchy. DFD shows the external entities from which data flows into the process and also the other flows of data within a system. It also includes the transformations of data flow by the process and the data stores to read or write a data.

Explanation of Symbols used in DFD:

• Process: Processes are represented by circle. The name of the process is written into the circle. The name of the process is usually given in such a way that represents the functionality of the process. More detailed functionalities can be shown in the next Level if it is required. Usually, it is better to keep the number of processes less than 7. If we see that the number of processes becomes more than 7 then we should combine some the processes to a single one to reduce the number of processes and further decompose it to the next level.

• External entity: External entities are only appeared in context diagram. External entities are represented by a rectangle and the name of the external entity is written into the shape. These send data to be processed and again receive the processed data.

• Data store: Data stares are represented by a left-right open rectangle. Name of the data store is written in between two horizontal lines of the open rectangle. Data stores are used as repositories from which data can be flown in or flown out to or from a process.

• Data flow: Data flows are shown as a directed edge between two components of a Data Flow Diagram. Data can flow from external entity to process, data store to process, in between two processes and vice-versa.











Practical 9
Aim: Identify and design the Test Suites for the given problem definition.

THEORY

Software Testing
Testing software is an important part of the development life cycle of a software. It is an expensive activity. Hence, appropriate testing methods are necessary for ensuring the reliability of a program. 

The purpose of testing is to verify and validate a software and to find the defects present in a software. The purpose of finding those problems is to get them fixed.
• Verification is the checking or we can say the testing of software for consistency and conformance by evaluating the results against pre-specified requirements.
• Validation looks at the systems correctness, i.e. the process of checking that what has been specified is what the user actually wanted.
• Defect is a variance between the expected and actual result. The defect’s ultimate source may be traced to a fault introduced in the specification, design, or development (coding) phases.

Testing Frameworks
Following are the different testing frameworks:

• jUnit - for Java unit test
• Selenium - is a suite of tools for automating web applications for software testing purposes, plugin for Firefox
• HP QC - is the HP Web-based test management tool. It familiarizes with the process of defining releases, specifying requirements, planning tests, executing tests, tracking defects, alerting on changes, and analyzing results. It also shows how to customize project
• IBM Rational - Rational software has a solution to support business sector for designing, implementing and testing software.

Types of Software Testing
Testing is done in every stage of software development life cycle, but the testing done at each level of software development is different in nature and has different objectives. 

1. Unit Testing
2. Integration Testing
3. System Testing

1.Unit Testing
Unit testing is done at the lowest level. It tests the basic unit of software, that is the smallest testable piece of software. The individual component or unit of a program are tested in unit testing. Unit testing are of two types.

• Black box testing: 
This is also known as functional testing, where the test cases are designed based on input output values only. There are many types of Black Box Testing but following are the prominent ones.

- Equivalence class partitioning: In this approach, the domain of input values to a 
program is divided into a set of equivalence classes. e.g., Consider a software program that computes whether an integer number is even or not that is in the range of 0 to 10. Determine the equivalence class test suite. There are three equivalence classes for this program. - The set of negative integers - The integers in the range 0 to 10 - The integer larger than 10.

- Boundary value analysis: In this approach, while designing the test cases, the values at boundaries of different equivalence classes are taken into consideration. e.g. In the above given example as in equivalence class partitioning, a boundary values based test suite is { 0, -1, 10, 11 }

• White box testing:
It is also known as structural testing. In this testing, test cases are designed on the basis of examination of the code. This testing is performed based on the knowledge of how the system is implemented. It includes analysing data flow, control flow, information flow, coding practices, exception and error handling within the system, to test the intended and unintended software behaviour. White box testing can be performed to validate whether code implementation follows intended design, to validate implemented security functionality, and to uncover exploitable vulnerabilities. This testing requires access to the source code. Though white box testing can be performed any time in the life cycle after the code is developed, but it is a good practice to perform white box testing during the unit testing phase.

Integration Testing
Integration testing is performed when two or more tested units are combined into a larger structure. The main objective of this testing is to check whether the different modules of a program interface with each other properly or not. This testing is mainly of two types:

- Top-down approach
- Bottom-up approach

In bottom-up approach, each subsystem is tested separately and then the full system is tested. But the top-down integration testing starts with the main routine and one or two subordinate routines in the system. After the top-level ‘skeleton’ has been tested, the immediately subroutines of the ‘skeleton’ are combined with it and tested.

System Testing
System testing tends to affirm the end-to-end quality of the entire system. System testing is often based on the functional / requirement specification of the system. Non-functional quality attributes, such as reliability, security, and maintainability are also checked. There are three types of system testing.







